{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","sha256","require","SHA256","fromHexString","hexString","Uint8Array","match","map","byte","parseInt","random","rand_state","range","count","Math","floor","rand_roll_num","current","console","log","input","signature","hex","signature_hash","random_roll","random_shuffle","array","i","length","ind","tmp","App","useState","setInput","hexPubKey","setHexPubKey","setSignature","pubKey","omArray","nacl","sign","open","TextEncoder","encode","e","om","TextDecoder","decode","verify","result","randState","JSON","stringify","field","choise","jack","calcResult","class","href","target","type","name","value","onChange","readonly","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.452f46d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport nacl from 'tweetnacl';\nconst hashes = require('jshashes');\nconst sha256 = new hashes.SHA256();\n\nconst fromHexString = hexString =>\n  new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\nconst random = (rand_state, range) => {\n\tconst count = Math.floor(rand_state.rand_roll_num / 32.0);\n\tconst current = rand_state.rand_roll_num % 32;\n\n\tconsole.log(count);\n\tconsole.log(current);\n\t\n\tif (current == 0)\n\t{\n\t  const input = `${rand_state.signature},${count}`;\n\t  console.log(input);\n\t  console.log(sha256.hex(input));\n\t  rand_state.signature_hash = fromHexString(sha256.hex(input));\n\t}\n\t\n\tconst random_roll = (rand_state.signature_hash[current] % range);\n\tconsole.log(`rand: ${random_roll}`);\n\trand_state.rand_roll_num++;\n\t\n\treturn random_roll;\n  }\n  \n  const random_shuffle = (rand_state, array) => {\n\tlet start = array.length - 1;\n\tfor (let i=start; i>0; --i)\n\t{\n\t  const ind = random(rand_state, i);\n\t  const tmp = array[i];\n\t  array[i] = array[ind];\n\t  array[ind] = tmp;\n\t}\n}\n\nfunction calcResult(rand_state, result) {\n  let field = [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0];\n  for (let i=0; i<4; i++) {\n\tfield[i] = 1;\n  }\n  for (let i=4; i<7; i++) {\n    field[i] = 2;\n  }\n  \n\n  let choise = [12, 13, 14];\n  random_shuffle(rand_state, choise);\n  field[7] = choise[0];\n  let jack = (random(rand_state, 100) < 1.0);\n  random_shuffle(rand_state, field);\n\n  return {\n\t  field:field,\n\t  jack:jack\n  }\n}\n\nfunction App() {\n  //let pair = nacl.sign.keyPair();\n  const [input, setInput] = useState('');\n  const [hexPubKey, setHexPubKey] = useState('bf8c2cb74701e8a5e7eeab2fd95478c957f0fb0d5fd3795d5219b0182f46fb2d');\n  const [signature, setSignature] = useState('');\n  const pubKey = fromHexString(hexPubKey);\n  \n  let omArray = null; \n  try {\n\t  omArray = nacl.sign.open(new TextEncoder().encode(signature), pubKey);\n  }\n  catch(e) {\n\tconsole.log(`sign.open error: ${e}`);\n  }\n  const om = (omArray) ? new TextDecoder(\"utf-8\").decode(omArray) : \"\";\n  const verify = (input != \"\") && (om === input);\n\n  let result = \"\";\n  if (verify && (signature != \"\"))\n  {\n\tlet randState = {\n\t\tsignature : signature,\n\t\trand_roll_num : 0\n\t};\n\tresult = JSON.stringify(calcResult(randState));\n  }\n  \n  return (\n    <div class=\"container\">\n\t\t<div class=\"panel panel-default\">\n\t\t\t<div class=\"panel-heading\">\n\t\t\t\t<h1><a href=\"https://digger888.github.io/\" target=\"_blank\">Digger888</a> result verify</h1>\n\t\t\t\t<h2>paste \"input\" and \"signature\" from \"nulldivision - resolve\" transaction and check result</h2>\n\t\t\t</div>\n\t\t\t<div class=\"panel-body\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label class=\"row-head\">Input (bet, tile1, tile2, ... tapos, taposn) : </label>\n\t\t\t\t\t<input type=\"text\" name=\"input\" value={input} class=\"form-de form-control\" onChange={e => setInput(e.target.value)} />\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label class=\"row-head\">Signature : </label>\n\t\t\t\t\t<input type=\"text\" name=\"signature\" value={signature} onChange={e => setSignature(e.target.value)}  class=\"form-de form-control\"/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label class=\"row-head\">Public Key* : </label>\n\t\t\t\t\t<input type=\"text\" name=\"public_key\" class=\"form-de form-control\" readonly=\"true\" value={hexPubKey} onChange={e => setHexPubKey(e.target.value)}/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label class=\"row-head\">Verify : </label>\n\t\t\t\t\t<input readonly=\"true\" type=\"text\" name=\"Verify_Result\" value={verify} class=\"form-de form-control\"/>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<label class=\"row-head\">Result : </label>\n\t\t\t\t\t<input readonly=\"true\" type=\"text\" name=\"Result\" value={result} class=\"form-de form-control\"/>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}